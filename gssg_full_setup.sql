
-- === GSSG: Full Setup (Tables + RLS) ===
create extension if not exists pgcrypto;

-- Ensure extra columns in users
alter table if exists public.users add column if not exists "SupervisorCode" text null;
alter table if exists public.users add column if not exists "Roll" text null;

-- Basic RLS for users (self + relationships)
alter table if exists public.users enable row level security;

drop policy if exists users_select_relationship on public.users;
create policy users_select_relationship on public.users
for select using (
  id = auth.uid()
  or exists (
    select 1 from public.users s
    where s.id = auth.uid()
      and public.users."SupervisorCode" = s."jobID"
  )
  or exists (
    select 1 from public.users e
    where e.id = auth.uid()
      and e."SupervisorCode" = public.users."jobID"
  )
);

drop policy if exists users_insert_self on public.users;
create policy users_insert_self on public.users
for insert with check ( id = auth.uid() );

-- Attendance
create table if not exists public.attendance_records (
  id bigint generated by default as identity primary key,
  employee_id uuid not null,
  shift_date date not null,
  check_in timestamptz null,
  check_out timestamptz null,
  method text null,
  location text null,
  recorded_by uuid null,
  status text null,
  constraint attendance_status_chk check (status in ('P','AB','SL','AL','TR','OFF') or status is null)
);
create index if not exists idx_attendance_employee_date on public.attendance_records(employee_id, shift_date);

alter table if exists public.attendance_records enable row level security;

drop policy if exists attendance_select_supervisor_children on public.attendance_records;
create policy attendance_select_supervisor_children on public.attendance_records
for select using (
  attendance_records.employee_id = auth.uid()
  or exists (
    select 1 from public.users s, public.users e
    where s.id = auth.uid()
      and e.id = attendance_records.employee_id
      and e."SupervisorCode" = s."jobID"
  )
);
drop policy if exists attendance_insert_by_supervisor on public.attendance_records;
create policy attendance_insert_by_supervisor on public.attendance_records
for insert with check (
  auth.uid() = recorded_by
  or exists (
    select 1 from public.users s, public.users e
    where s.id = auth.uid()
      and e.id = attendance_records.employee_id
      and e."SupervisorCode" = s."jobID"
  )
);
drop policy if exists attendance_update_by_supervisor on public.attendance_records;
create policy attendance_update_by_supervisor on public.attendance_records
for update using (true) with check (
  auth.uid() = recorded_by
  or exists (
    select 1 from public.users s, public.users e
    where s.id = auth.uid()
      and e.id = attendance_records.employee_id
      and e."SupervisorCode" = s."jobID"
  )
);

-- Violations
create table if not exists public.violations (
  id bigint generated by default as identity primary key,
  employee_id uuid not null,
  issue_datetime timestamptz not null default now(),
  item_code text null,
  category text null,
  reason text null,
  location text null,
  remarks text null,
  issued_by uuid null,
  issue_no text null,
  revision text null
);
create index if not exists idx_violations_employee_dt on public.violations(employee_id, issue_datetime desc);

alter table if exists public.violations enable row level security;

drop policy if exists violations_select_supervisor_children on public.violations;
create policy violations_select_supervisor_children on public.violations
for select using (
  violations.employee_id = auth.uid()
  or exists (
    select 1 from public.users s, public.users e
    where s.id = auth.uid()
      and e.id = violations.employee_id
      and e."SupervisorCode" = s."jobID"
  )
);
drop policy if exists violations_insert_by_supervisor on public.violations;
create policy violations_insert_by_supervisor on public.violations
for insert with check (
  auth.uid() = issued_by
  or exists (
    select 1 from public.users s, public.users e
    where s.id = auth.uid()
      and e.id = violations.employee_id
      and e."SupervisorCode" = s."jobID"
  )
);

-- Evaluations
create table if not exists public.eval_supervisor_to_employee (
  id bigint generated by default as identity primary key,
  period date not null,
  supervisor_id uuid not null,
  employee_id uuid not null,
  score int not null check (score between 1 and 10),
  notes text null
);
alter table if exists public.eval_supervisor_to_employee enable row level security;
drop policy if exists eval_se_insert on public.eval_supervisor_to_employee;
create policy eval_se_insert on public.eval_supervisor_to_employee
for insert with check ( supervisor_id = auth.uid() );

create table if not exists public.eval_employee_to_supervisor (
  id bigint generated by default as identity primary key,
  period date not null,
  employee_id uuid not null,
  supervisor_id uuid not null,
  score int not null check (score between 1 and 10),
  notes text null
);
alter table if exists public.eval_employee_to_supervisor enable row level security;
drop policy if exists eval_es_insert on public.eval_employee_to_supervisor;
create policy eval_es_insert on public.eval_employee_to_supervisor
for insert with check ( employee_id = auth.uid() );

-- Requests
create table if not exists public.leave_requests (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  employee_id uuid not null,
  from_date date null,
  to_date date null,
  reason text null
);
alter table if exists public.leave_requests enable row level security;
drop policy if exists lr_insert on public.leave_requests;
create policy lr_insert on public.leave_requests for insert with check ( employee_id = auth.uid() );
drop policy if exists lr_select_self on public.leave_requests;
create policy lr_select_self on public.leave_requests for select using ( employee_id = auth.uid() );

create table if not exists public.permission_requests (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  employee_id uuid not null,
  date date null,
  from_time text null,
  to_time text null,
  reason text null
);
alter table if exists public.permission_requests enable row level security;
drop policy if exists pr_insert on public.permission_requests;
create policy pr_insert on public.permission_requests for insert with check ( employee_id = auth.uid() );
drop policy if exists pr_select_self on public.permission_requests;
create policy pr_select_self on public.permission_requests for select using ( employee_id = auth.uid() );

create table if not exists public.hr_requests (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  employee_id uuid not null,
  request_type text null,
  details text null
);
alter table if exists public.hr_requests enable row level security;
drop policy if exists hr_insert on public.hr_requests;
create policy hr_insert on public.hr_requests for insert with check ( employee_id = auth.uid() );
drop policy if exists hr_select_self on public.hr_requests;
create policy hr_select_self on public.hr_requests for select using ( employee_id = auth.uid() );
